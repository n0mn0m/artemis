version: '2'

networks:
  # This special network is configured so that the local metadata
  # service can bind to the specific IP address that ECS uses
  # in production
  credentials_network:
    driver: bridge
    ipam:
      config:
        - subnet: "169.254.170.0/24"
          gateway: 169.254.170.1

volumes:
  notification_master_data:
    driver: local

services:
  # This container vends aws credentials to your containers
  ecs-local-endpoints:
    # The Amazon ECS Local Container Endpoints Docker Image
    image: amazon/amazon-ecs-local-container-endpoints
    volumes:
      # Mount /var/run so we can access docker.sock and talk to Docker
      - /var/run:/var/run
      # Mount the shared configuration directory, used by the AWS CLI and AWS SDKs
      # On Windows, this directory can be found at "%UserProfile%\.aws"
      - ${USERPROFILE}/.aws:/home/.aws/
    environment:
      # define the home folder; credentials will be read from $HOME/.aws
      HOME: "/home"
      # You can change which AWS CLI Profile is used
      AWS_PROFILE: "default"
    networks:
      credentials_network:
        # define an alias for service discovery
        ipv4_address: "169.254.170.2"

  mongo:
    image: 'bitnami/mongodb:4.2'
    depends_on:
      - ecs-local-endpoints
    restart: 'always'
    environment:
      - MONGODB_ROOT_PASSWORD=iamroot
      - MONGODB_USERNAME=api
      - MONGODB_PASSWORD=password123
      - MONGODB_DATABASE=assetmaintenance
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_REPLICA_SET_KEY=1234567890
      - MONGODB_ADVERTISED_HOSTNAME=mongo
    ports:
      - 27017:27017
    volumes:
      - 'notification_master_data:/bitnami'
      - './_repository/:/docker-entrypoint-initdb.d/'
    networks:
      credentials_network:
        # define an alias for service discovery
        aliases:
          - mongo
        ipv4_address: "169.254.170.4"

  mongo-secondary-one:
    image: 'bitnami/mongodb:4.2'
    depends_on:
      - mongo
      - ecs-local-endpoints
    restart: 'always'
    environment:
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_ADVERTISED_HOSTNAME=mongo-secondary-one
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongo
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=iamroot
      - MONGODB_REPLICA_SET_KEY=1234567890
    networks:
      credentials_network:
        # define an alias for service discovery
        ipv4_address: "169.254.170.14"

  mongo-secondary-two:
    image: 'bitnami/mongodb:4.2'
    depends_on:
      - mongo
      - ecs-local-endpoints
    restart: 'always'
    environment:
      - MONGODB_REPLICA_SET_NAME=rs0
      - MONGODB_ADVERTISED_HOSTNAME=mongo-secondary-two
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongo
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=iamroot
      - MONGODB_REPLICA_SET_KEY=1234567890
    networks:
      credentials_network:
        # define an alias for service discovery
        ipv4_address: "169.254.170.15"

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=iamroot
    depends_on:
      - mongo
    networks:
      credentials_network:
        aliases:
          - mongo-express
        ipv4_address: "169.254.170.6"

  memcached:
    image: memcached:latest
    restart: 'always'
    ports:
      - 11211:11211
    networks:
      credentials_network:
        aliases:
          - memcached
        ipv4_address: "169.254.170.7"
